@model PhotoShare.Web.Models.PhotoDetailsViewModel

@{
    ViewBag.Title = Model.Comment;
    const int MaxRating = 5;
    var username = "@" + Model.Username;
}

@Html.HiddenFor(model => model.Id)
<h2>@Html.RouteLink(username, "UserStream", new { username = Model.Username }, null)</h2>
<div>
    <h4>
        <span class="comment" contenteditable="false">@Model.Comment</span>
        @if (Model.IsOwner)
        {
            <span class="edit-comment glyphicon glyphicon glyphicon-pencil" aria-hidden="true"></span>
        }
        <span class="timestamp pull-right">@Html.DisplayFor(model => model.Timestamp, "LastModified")</span>
    </h4>
    <hr />
    <div class="container">
        <div class="row">
            <div id="image" class="col-sm-8">
                <img class="img-responsive" src='~/Images/@Model.Id' />
            </div>
            <div id="details" class="col-sm-4">
                <div class="row">
                    <div class="col-xs-8">
                        <div>
                            Score: <span class="score">@Model.Score.ToString("0.0")</span>
                        </div>
                        <span class="rating">
                            @for (int i = 1; i < MaxRating + 1; i++)
                            {
                                if (i <= Model.Rating)
                                {<span data-rating="@i" class="star glyphicon glyphicon-star"></span>}
                                else
                                {<span data-rating="@i" class="star glyphicon glyphicon-star-empty"></span>}
                            }
                            <span class="info pull-right">Click to rate!</span>
                        </span>
                    </div>
                    <div class="col-xs-4">
                        <button class="btn btn-danger delete-button pull-right">
                            <span class="glyphicon glyphicon-trash" title="Delete" aria-hidden="true"></span>
                        </button>
                    </div>
                </div>
                <hr />
                <div class="row">
                    <div class="col-xs-12">
                        <span class="username">@Html.RouteLink(username, "UserStream", new { username = Model.Username }, null):</span>
                        <span class="comment">@Html.DisplayFor(model => model.Comment)</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts
{
<script>
    $(function () {  //hvis man wrapper hele funksjonen inn i denne vil ikke denne funksjonen begynne å kjøre før noe annet er lastet på siden. Denne vil nå kjøre etter at alt annet er rendret
        function updateScore(score) {
            $("#details span.score").html(score.toFixed(1));
        }
        function updateRating($element) {
            //Set filled stars up to user rating
            $element
                .prevAll('.star')
                .addBack()
                .removeClass('glyphicon-star glyphicon-star-empty')
                .addClass('glyphicon-star');

            //Set empty stars above user rating
            $element
                .nextAll('.star')
                .removeClass('glyphicon-star glyphicon-star-empty')
                .addClass('glyphicon-star-empty');
        }
        function saveComment(event) {
            if (event.keyCode == 13) {
                var $comment = $(event.target);
                var $element = $comment.siblings(".edit-comment");
                var comment = $comment.text();

                var id = $('#Id').val();
                $.ajax({
                    method: 'PUT',
                    url: '/api/Photo/' + id + '/comment',
                    contentType: 'application/json',
                    data: JSON.stringify({ comment: comment })
                }).then(
                    function (data) {
                        console.log('Comment saved!');
                    },
                    function (error) {
                        console.error(error)
                    }
                )

                $comment.off('keypress', saveComment);
                $comment.attr('contenteditable', false);
                $element.show();
            }
        }
        $(".edit-comment").on('click', function (event) {
            var $element = $(event.target);
            var $comment = $element.siblings(".comment");
            $element.hide();
            $comment.attr('contenteditable', true);
            $comment.on('keypress', saveComment);
            $comment.focus();
            $comment.selectText();
        });
        $('.rating > span[data-rating]').on('click', function (element) {
            var $element = $(element.target);
            var data = $element.data();


            var id = $('#Id').val();
            $.ajax({
                method: 'PUT',
                url: '/api/Photo/' + id + '/rate/' + data.rating
            }).then(
                function (data) {
                    console.log(data.NewScore);
                    updateRating($element);
                    updateScore(data.NewScore);
                },
                function (error) {
                    console.error(error)
                }
            )
        })
        $('.delete-button').on('click', function () {
            var id = $('#Id').val();
            $.ajax({
                method: 'DELETE',
                url: '/api/Photo/' + id   //det er her vi binder hvilket bilde som skal slettes
            }).then(
                function () {
                    window.location.href = "/";
                },
                function (error) {
                    console.error(error)
                }
            )
        })
        jQuery.fn.selectText = function () {
            var doc = document;
            var element = this[0];
            if (doc.body.createTextRange) {
                var range = document.body.createTextRange();
                range.moveToElementText(element);
                range.select();
            } else if (window.getSelection) {
                var selection = window.getSelection();
                var range = document.createRange();
                range.selectNodeContents(element);
                selection.removeAllRanges();
                selection.addRange(range);
            }
        };
    });
</script>
}
